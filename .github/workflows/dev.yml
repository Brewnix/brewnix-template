name: Brewnix Template - Development

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-shell:
    name: Shell Script Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Lint shell scripts
      run: |
        echo "Linting shell scripts..."
        find . -name "*.sh" -type f | while read -r script; do
          echo "Checking: $script"
          shellcheck "$script" || exit 1
        done

    - name: Lint deployment scripts
      run: |
        echo "Linting deployment scripts..."
        shellcheck scripts/deploy-vendor.sh
        shellcheck scripts/backup-state.sh

  lint-yaml:
    name: YAML Linting and Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml yamllint

    - name: Lint YAML files
      run: |
        echo "Linting YAML syntax..."
        yamllint -d relaxed .

    - name: Validate site configurations
      run: |
        echo "Validating site configuration syntax..."
        python3 -c "
        import yaml, sys, glob
        for f in glob.glob('config/sites/*/*.yml'):
            try:
                yaml.safe_load(open(f))
                print(f'✓ {f}')
            except Exception as e:
                print(f'✗ {f}: {e}')
                sys.exit(1)
        "

    - name: Validate vendor playbooks
      run: |
        echo "Validating vendor playbook syntax..."
        python3 -c "
        import yaml, sys, glob
        for f in glob.glob('vendor/*/ansible/site.yml'):
            try:
                yaml.safe_load(open(f))
                print(f'✓ {f}')
            except Exception as e:
                print(f'✗ {f}: {e}')
                sys.exit(1)
        "

  lint-ansible:
    name: Ansible Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible and linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint

    - name: Install Ansible collections
      run: |
        ansible-galaxy collection install community.general
        ansible-galaxy collection install ansible.posix

    - name: Lint common framework roles
      run: |
        echo "Linting common framework roles..."
        if [ -d "common/ansible/roles" ]; then
          for role in common/ansible/roles/*/; do
            if [ -d "$role" ]; then
              echo "Linting role: $role"
              ansible-lint "$role" || exit 1
            fi
          done
        fi

    - name: Lint vendor-specific roles
      run: |
        echo "Linting vendor-specific roles..."
        for vendor in vendor/*/ansible/roles/*/; do
          if [ -d "$vendor" ]; then
            echo "Linting vendor role: $vendor"
            ansible-lint "$vendor" || exit 1
          fi
        done

    - name: Syntax check vendor playbooks
      run: |
        echo "Checking vendor playbook syntax..."
        for playbook in vendor/*/ansible/site.yml; do
          if [ -f "$playbook" ]; then
            echo "Syntax checking: $playbook"
            cd "$(dirname "$playbook")"
            ansible-playbook --syntax-check site.yml
            cd - > /dev/null
          fi
        done

  lint-terraform:
    name: Terraform Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: |
        echo "Checking Terraform formatting..."
        if [ -d "common/terraform" ]; then
          cd common/terraform
          terraform fmt -check -recursive
          cd - > /dev/null
        fi

    - name: Terraform Validation
      run: |
        echo "Validating Terraform configurations..."
        if [ -d "common/terraform" ]; then
          cd common/terraform
          terraform init -backend=false
          terraform validate
          cd - > /dev/null
        fi

    - name: Terraform Security Scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: common/terraform
        soft_fail: true

  lint-documentation:
    name: Documentation Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install markdownlint
      run: |
        npm install -g markdownlint-cli

    - name: Lint Markdown files
      run: |
        echo "Linting Markdown documentation..."
        markdownlint README.md docs/*.md vendor/*/README.md || true

    - name: Check for broken links
      run: |
        echo "Checking for broken internal links..."
        # Simple check for markdown links that might be broken
        grep -r '\[.*\](.*)' README.md docs/ vendor/ | grep -v 'http' | while read -r link; do
          echo "Found internal link: $link"
        done

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsonschema

    - name: Validate deployment script
      run: |
        echo "Validating deployment script functionality..."
        bash scripts/deploy-vendor.sh --help > /dev/null

    - name: Test vendor type validation
      run: |
        echo "Testing vendor type validation..."
        # Test valid vendor types
        for vendor in nas k3s-cluster development security; do
          echo "Testing vendor: $vendor"
          if ! bash scripts/deploy-vendor.sh "$vendor" non-existent-site.yml --check-only 2>&1 | grep -q "Site configuration not found"; then
            echo "ERROR: Vendor $vendor validation failed"
            exit 1
          fi
        done
        
        # Test invalid vendor type
        if bash scripts/deploy-vendor.sh invalid-vendor non-existent-site.yml --check-only 2>&1 | grep -q "Invalid vendor type"; then
          echo "✓ Invalid vendor type properly rejected"
        else
          echo "ERROR: Invalid vendor type not properly rejected"
          exit 1
        fi

    - name: Validate site configuration structure
      run: |
        echo "Validating site configuration structure..."
        find config/sites -name "*.yml" -type f | while read site_file; do
          echo "Checking structure: $site_file"
          if ! python3 -c "import yaml; c=yaml.safe_load(open('$site_file')); assert 'site_name' in c and 'network' in c"; then
            echo "ERROR: Invalid structure in $site_file"
            exit 1
          fi
          echo "✓ Structure valid: $site_file"
        done || exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        # Scan any Python files for security issues
        find . -name "*.py" -type f | xargs bandit -r || true

    - name: Check for secrets
      run: |
        echo "Checking for potential secrets..."
        # Check for common secret patterns
        if grep -r -i "password\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git; then
          echo "WARNING: Found potential hardcoded passwords"
        fi
        
        if grep -r -i "api_key\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git; then
          echo "WARNING: Found potential hardcoded API keys"
        fi
        
        echo "Secret scan completed"

    - name: Validate ansible.cfg security
      run: |
        echo "Checking Ansible configuration security..."
        for ansible_cfg in vendor/*/ansible/ansible.cfg; do
          if [ -f "$ansible_cfg" ]; then
            echo "Checking: $ansible_cfg"
            if grep -q "host_key_checking.*False" "$ansible_cfg"; then
              echo "✓ Host key checking appropriately disabled for development"
            fi
          fi
        done
