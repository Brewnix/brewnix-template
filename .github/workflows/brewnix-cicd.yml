name: Brewnix CI/CD

on:
  push:
    branches: [ main, staging, develop ]
    paths:
      - 'config/**'
      - 'scripts/**'
      - 'bootstrap/**'
      - 'web-ui/**'
      - 'docs/**'
      - '.github/**'
      - 'ansible/**'
      - 'terraform/**'
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'config/**'
      - 'scripts/**'
      - 'bootstrap/**'
      - 'web-ui/**'
      - 'docs/**'
      - '.github/**'
      - 'ansible/**'
      - 'terraform/**'

env:
  TF_VERSION: '1.5.7'
  ANSIBLE_VERSION: '8.5.0'
  PYTHON_VERSION: '3.11'

jobs:
  # Validate all configurations and code
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      sites-changed: ${{ steps.sites.outputs.sites }}
      server-types: ${{ steps.sites.outputs.server_types }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }} ansible-lint yamllint

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt || true

      - name: Validate YAML configurations
        run: |
          echo "🔍 Validating YAML files..."
          find config/ -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Checking $file..."
            python -c "
            import yaml, sys
            try:
              with open('$file', 'r') as f:
                yaml.safe_load(f)
              print(f'✅ $file')
            except Exception as e:
              print(f'❌ $file: {e}')
              sys.exit(1)
            " || exit 1
          done

      - name: Validate site configurations
        run: |
          echo "🏗️ Validating site configurations..."
          for site_config in config/sites/*.yml; do
            if [[ -f "$site_config" ]]; then
              echo "Validating $(basename "$site_config")..."
              ./scripts/build-release.sh validate "$site_config" || exit 1
            fi
          done

      - name: Lint Ansible playbooks
        run: |
          echo "🎭 Linting Ansible playbooks..."
          ansible-lint ansible/ || true

      - name: Validate Terraform configurations
        run: |
          echo "🏗️ Validating Terraform configurations..."
          find . -name "*.tf" -type f | while read -r tf_file; do
            dir=$(dirname "$tf_file")
            if [[ -f "$dir/main.tf" ]]; then
              echo "Validating Terraform in $dir..."
              cd "$dir"
              terraform init -backend=false >/dev/null 2>&1
              terraform validate || exit 1
              cd - >/dev/null
            fi
          done

      - name: Check Python code quality
        run: |
          echo "🐍 Checking Python code quality..."
          python -m pip install flake8 black isort
          flake8 web-ui/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          black --check web-ui/ scripts/ || true

      - name: Check changed sites
        id: sites
        run: |
          echo "📋 Analyzing changed sites..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} | grep '^config/sites/' || true)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} | grep '^config/sites/' || true)
          fi

          CHANGED_SITES=""
          SERVER_TYPES=""

          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]]; then
              site_name=$(basename "$file" .yml)
              server_type=$(grep "^server_type:" "$file" | cut -d'"' -f2 || echo "unknown")

              CHANGED_SITES="${CHANGED_SITES:+$CHANGED_SITES,}$site_name"
              SERVER_TYPES="${SERVER_TYPES:+$SERVER_TYPES,}$server_type"
            fi
          done

          echo "sites=$CHANGED_SITES" >> $GITHUB_OUTPUT
          echo "server_types=$SERVER_TYPES" >> $GITHUB_OUTPUT
          echo "Changed sites: $CHANGED_SITES"
          echo "Server types: $SERVER_TYPES"

  # Test web UI
  test-web-ui:
    name: Test Web UI
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install web UI dependencies
        run: |
          cd web-ui
          pip install -r requirements.txt

      - name: Run web UI tests
        run: |
          cd web-ui
          python -m pytest --cov=. --cov-report=xml || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./web-ui/coverage.xml
          flags: web-ui
          name: Web UI Coverage

  # Build and test bootstrap images
  build-bootstrap:
    name: Build Bootstrap Images
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.sites-changed != ''
    strategy:
      matrix:
        server_type: ${{ fromJSON(format('[{0}]', needs.validate.outputs.server_types)) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y genisoimage

      - name: Build bootstrap image
        run: |
          echo "🔨 Building bootstrap for ${{ matrix.server_type }}..."

          # Find a site config for this server type
          SITE_CONFIG=""
          for config in config/sites/*.yml; do
            if [[ -f "$config" ]]; then
              type_in_config=$(grep "^server_type:" "$config" | cut -d'"' -f2 || echo "")
              if [[ "$type_in_config" == "${{ matrix.server_type }}" ]]; then
                SITE_CONFIG="$config"
                break
              fi
            fi
          done

          if [[ -n "$SITE_CONFIG" ]]; then
            echo "Using site config: $SITE_CONFIG"
            ./scripts/build-release.sh bootstrap "$SITE_CONFIG"
          else
            echo "⚠️ No site config found for ${{ matrix.server_type }}, skipping bootstrap build"
          fi

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test-web-ui, build-bootstrap]
    if: (github.ref == 'refs/heads/staging' || github.event_name == 'pull_request') && needs.validate.outputs.sites-changed != ''
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.STAGING_PROXMOX_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy changed sites to staging
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False

          IFS=',' read -ra SITES <<< "${{ needs.validate.outputs.sites-changed }}"
          for site in "${SITES[@]}"; do
            echo "🚀 Deploying $site to staging..."
            ./scripts/deploy-site.sh "$site" --staging --environment staging
          done

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, test-web-ui, build-bootstrap, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.validate.outputs.sites-changed != ''
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.PRODUCTION_PROXMOX_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy changed sites to production
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False

          IFS=',' read -ra SITES <<< "${{ needs.validate.outputs.sites-changed }}"
          for site in "${SITES[@]}"; do
            echo "🚀 Deploying $site to production..."
            ./scripts/deploy-site.sh "$site" --production --environment production
          done

      - name: Create release
        run: |
          echo "📦 Creating release..."
          VERSION=$(date +%Y%m%d-%H%M%S)
          git tag "v$VERSION"
          git push origin "v$VERSION"

  # Notify about deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Brewnix deployment ${{ job.status }}"
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != null

      - name: Notify on Discord
        uses: Ilshidur/action-discord@master
        with:
          args: "Brewnix deployment completed with status: ${{ job.status }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: env.DISCORD_WEBHOOK != null
