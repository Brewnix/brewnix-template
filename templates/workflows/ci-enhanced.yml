name: CI Enhanced - Development Branch

on:
  push:
    branches: [ dev, develop, development ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'config/**'
      - 'vendor/**'
      - 'templates/**'
  pull_request:
    branches: [ dev, develop, development ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'config/**'
      - 'vendor/**'
      - 'templates/**'

env:
  CI_START_TIME: ${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}

jobs:
  # Enhanced Linting and Code Quality
  lint-enhanced:
    name: Enhanced Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js for advanced linting
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install comprehensive linting tools
        run: |
          npm install -g markdownlint-cli
          npm install -g markdown-link-check
          sudo apt-get update
          sudo apt-get install -y shellcheck yamllint python3-pip jq

      - name: Enhanced shell script linting
        run: |
          echo "üîç Running enhanced shell script analysis..."
          find . -name "*.sh" -type f -not -path "./vendor/*" | xargs -I {} sh -c '
            echo "Checking $1"
            shellcheck "$1" || echo "Shellcheck issues in $1"
            # Check for bash strict mode
            if ! head -5 "$1" | grep -q "set -euo pipefail"; then
              echo "‚ö†Ô∏è  Warning: $1 may not use bash strict mode"
            fi
          ' -- {}

      - name: YAML validation with schema checking
        run: |
          echo "üîç Validating YAML files with enhanced checks..."
          find . -name "*.yml" -o -name "*.yaml" | grep -v vendor/ | xargs -I {} sh -c '
            echo "Validating $1"
            python3 -c "
            import yaml
            import sys
            try:
              with open('$1', 'r') as f:
                data = yaml.safe_load(f)
              print(f'‚úì Valid YAML: $1')
            except Exception as e:
              print(f'‚úó Invalid YAML in $1: {e}')
              sys.exit(1)
            " || exit 1
          ' -- {}

      - name: Markdown linting and link checking
        run: |
          echo "üîç Running markdown validation..."
          markdownlint "**/*.md" --ignore node_modules --ignore vendor/ || echo "Markdown linting completed with warnings"
          find docs -name "*.md" -exec markdown-link-check {} \; || echo "Link checking completed"

      - name: Code complexity analysis
        run: |
          echo "üîç Analyzing code complexity..."
          find scripts -name "*.sh" -exec wc -l {} \; | sort -nr | head -10 | while read lines file; do
            if [ "$lines" -gt 200 ]; then
              echo "‚ö†Ô∏è  Warning: $file is $lines lines long (consider splitting)"
            fi
          done

  # Advanced Security Scanning
  security-enhanced:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Advanced secrets detection
        run: |
          echo "üîç Running advanced secrets detection..."
          # Check for various secret patterns
          patterns=(
            "password.*="
            "secret.*="
            "key.*="
            "token.*="
            "api_key.*="
            "aws_access_key"
            "aws_secret_key"
            "private_key"
            "BEGIN.*PRIVATE"
          )

          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -i "$pattern" --include="*.sh" --include="*.yml" --include="*.yaml" --include="*.json" . | grep -v "example\|template\|test\|vendor/"; then
              echo "üö® Potential secret pattern found: $pattern"
              found_secrets=true
            fi
          done

          if [ "$found_secrets" = true ]; then
            echo "‚ùå Secrets detected - review required"
            exit 1
          else
            echo "‚úÖ No obvious secrets detected"
          fi

      - name: Security audit for dangerous patterns
        run: |
          echo "üîç Auditing for dangerous patterns..."
          dangerous_patterns=(
            "rm -rf /"
            "chmod 777"
            "curl.*|.*bash"
            "wget.*|.*bash"
            "eval.*\$"
            "sudo.*password"
          )

          for pattern in "${dangerous_patterns[@]}"; do
            if grep -r "$pattern" --include="*.sh" . | grep -v "#.*$pattern"; then
              echo "üö® Dangerous pattern found: $pattern"
              exit 1
            fi
          done
          echo "‚úÖ No dangerous patterns detected"

      - name: Dependency vulnerability scanning
        run: |
          echo "üîç Scanning for dependency vulnerabilities..."
          # Check for outdated package references
          if command -v pip-audit &> /dev/null; then
            pip-audit --format json || echo "Pip audit completed"
          fi

          # Check for known vulnerable patterns in scripts
          vulnerable_commands=(
            "openssl.*des"
            "ssh.*-o.*StrictHostKeyChecking=no"
            "curl.*-k"
            "wget.*--no-check-certificate"
          )

          for cmd in "${vulnerable_commands[@]}"; do
            if grep -r "$cmd" --include="*.sh" .; then
              echo "‚ö†Ô∏è  Potentially vulnerable command pattern: $cmd"
            fi
          done

  # Performance Benchmarking
  performance:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup benchmarking tools
        run: |
          sudo apt-get update
          sudo apt-get install -y time bc

      - name: Benchmark script execution
        run: |
          echo "‚è±Ô∏è  Running performance benchmarks..."

          # Benchmark core scripts
          core_scripts=("scripts/core/init.sh" "scripts/core/config.sh" "scripts/core/logging.sh")

          echo "| Script | Execution Time | Memory Usage |" > performance-report.md
          echo "|--------|----------------|--------------|" >> performance-report.md

          for script in "${core_scripts[@]}"; do
            if [ -f "$script" ]; then
              echo "Benchmarking $script..."
              start_time=$(date +%s.%3N)

              # Run script and capture metrics
              /usr/bin/time -f "%e %M" bash "$script" 2>&1 | tail -1 | while read execution_time memory_usage; do
                echo "| $script | ${execution_time}s | ${memory_usage}KB |" >> performance-report.md
                echo "‚úì $script: ${execution_time}s, ${memory_usage}KB"
              done
            fi
          done

          cat performance-report.md

      - name: Code performance analysis
        run: |
          echo "üîç Analyzing code performance patterns..."

          # Check for performance anti-patterns
          if grep -r "sleep.*[0-9]" --include="*.sh" . | grep -v "#"; then
            echo "‚ö†Ô∏è  Sleep statements found - may impact performance"
          fi

          # Check for inefficient loops
          if grep -r "for.*in.*\$\(" --include="*.sh" .; then
            echo "‚ö†Ô∏è  Command substitution in loops detected - potential performance issue"
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md

  # Enhanced Sanity Checks
  sanity-enhanced:
    name: Enhanced Sanity Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup development environment
        run: |
          echo "üîß Setting up enhanced development environment..."
          sudo apt-get update
          sudo apt-get install -y curl wget git jq

      - name: Advanced configuration validation
        run: |
          echo "üîç Running advanced configuration validation..."

          # Check for required configuration files
          required_configs=("config/site.conf" "config/global.yml")
          for config in "${required_configs[@]}"; do
            if [ -f "$config" ]; then
              echo "‚úì Found: $config"
            else
              echo "‚ö†Ô∏è  Missing: $config"
            fi
          done

          # Validate YAML syntax in config directory
          find config -name "*.yml" -o -name "*.yaml" 2>/dev/null | while read -r file; do
            if [ -f "$file" ]; then
              python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null && echo "‚úì Valid YAML: $file" || echo "‚úó Invalid YAML: $file"
            fi
          done

      - name: Submodule validation
        run: |
          echo "üîç Validating submodules..."

          # Check if submodules are properly initialized
          if [ -f ".gitmodules" ]; then
            git submodule status | while read -r status submodule; do
              if [[ $status == -* ]]; then
                echo "‚ö†Ô∏è  Submodule not initialized: $submodule"
              else
                echo "‚úì Submodule OK: $submodule"
              fi
            done
          else
            echo "‚ÑπÔ∏è  No submodules configured"
          fi

      - name: Directory structure validation
        run: |
          echo "üîç Validating directory structure..."

          # Required directories for BrewNix
          required_dirs=(
            "scripts/core"
            "scripts/utilities"
            "templates/workflows"
            "docs"
            "config"
            "vendor"
          )

          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úì Directory exists: $dir"
            else
              echo "‚úó Missing directory: $dir"
            fi
          done

      - name: Core module integrity check
        run: |
          echo "üîç Checking core module integrity..."

          core_files=(
            "scripts/core/init.sh"
            "scripts/core/config.sh"
            "scripts/core/logging.sh"
          )

          for file in "${core_files[@]}"; do
            if [ -f "$file" ]; then
              if [ -x "$file" ]; then
                echo "‚úì Executable: $file"
              else
                echo "‚ö†Ô∏è  Not executable: $file"
              fi

              # Check for basic structure
              if head -5 "$file" | grep -q "set -euo pipefail"; then
                echo "‚úì Strict mode: $file"
              else
                echo "‚ö†Ô∏è  No strict mode: $file"
              fi
            else
              echo "‚úó Missing: $file"
            fi
          done

  # CI Performance Monitoring
  ci-performance:
    name: CI Performance Monitoring
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-enhanced, security-enhanced, performance, sanity-enhanced]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate CI duration
        run: |
          start_time="${{ env.CI_START_TIME }}"
          end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          if [ -n "$start_time" ]; then
            start_seconds=$(date -d "$start_time" +%s)
            end_seconds=$(date -d "$end_time" +%s)
            duration=$((end_seconds - start_seconds))

            echo "CI Duration: ${duration} seconds" > ci-performance.md
            echo "Start: $start_time" >> ci-performance.md
            echo "End: $end_time" >> ci-performance.md

            if [ $duration -gt 600 ]; then
              echo "‚ö†Ô∏è  CI took longer than 10 minutes" >> ci-performance.md
            fi
          fi

      - name: Generate CI performance report
        run: |
          echo "# CI Performance Report" > ci-performance-report.md
          echo "Generated: $(date)" >> ci-performance-report.md
          echo "" >> ci-performance-report.md
          echo "## Job Results:" >> ci-performance-report.md
          echo "- Linting: ${{ needs.lint-enhanced.result }}" >> ci-performance-report.md
          echo "- Security: ${{ needs.security-enhanced.result }}" >> ci-performance-report.md
          echo "- Performance: ${{ needs.performance.result }}" >> ci-performance-report.md
          echo "- Sanity: ${{ needs.sanity-enhanced.result }}" >> ci-performance-report.md
          echo "" >> ci-performance-report.md

          if [ -f "ci-performance.md" ]; then
            cat ci-performance.md >> ci-performance-report.md
          fi

          cat ci-performance-report.md

      - name: Upload CI performance report
        uses: actions/upload-artifact@v4
        with:
          name: ci-performance-report
          path: ci-performance-report.md

  # Final Status Report with Metrics
  status-enhanced:
    name: Enhanced CI Status Report
    runs-on: ubuntu-latest
    needs: [lint-enhanced, security-enhanced, performance, sanity-enhanced, ci-performance]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          name: performance-report
          path: ./reports/

      - name: Download CI performance report
        uses: actions/download-artifact@v4
        with:
          name: ci-performance-report
          path: ./reports/

      - name: Generate comprehensive status report
        run: |
          echo "# Enhanced CI Status Report" > enhanced-ci-report.md
          echo "Generated: $(date)" >> enhanced-ci-report.md
          echo "Repository: ${{ github.repository }}" >> enhanced-ci-report.md
          echo "Branch: ${{ github.ref_name }}" >> enhanced-ci-report.md
          echo "Commit: ${{ github.sha }}" >> enhanced-ci-report.md
          echo "" >> enhanced-ci-report.md

          echo "## Pipeline Results:" >> enhanced-ci-report.md
          echo "- üîç Enhanced Linting: ${{ needs.lint-enhanced.result }}" >> enhanced-ci-report.md
          echo "- üîí Advanced Security: ${{ needs.security-enhanced.result }}" >> enhanced-ci-report.md
          echo "- ‚ö° Performance Benchmarking: ${{ needs.performance.result }}" >> enhanced-ci-report.md
          echo "- ‚úÖ Enhanced Sanity Checks: ${{ needs.sanity-enhanced.result }}" >> enhanced-ci-report.md
          echo "- üìä CI Performance: ${{ needs.ci-performance.result }}" >> enhanced-ci-report.md
          echo "" >> enhanced-ci-report.md

          echo "## Key Metrics:" >> enhanced-ci-report.md
          if [ -f "reports/ci-performance-report.md" ]; then
            grep -E "(Duration|Start|End)" reports/ci-performance-report.md >> enhanced-ci-report.md
          fi
          echo "" >> enhanced-ci-report.md

          echo "## Recommendations:" >> enhanced-ci-report.md
          if [[ "${{ needs.lint-enhanced.result }}" == "failure" ]]; then
            echo "- Review and fix linting issues" >> enhanced-ci-report.md
          fi
          if [[ "${{ needs.security-enhanced.result }}" == "failure" ]]; then
            echo "- Address security vulnerabilities" >> enhanced-ci-report.md
          fi
          if [[ "${{ needs.performance.result }}" == "failure" ]]; then
            echo "- Investigate performance issues" >> enhanced-ci-report.md
          fi
          echo "" >> enhanced-ci-report.md

          echo "## Next Steps:" >> enhanced-ci-report.md
          echo "1. Review detailed reports in artifacts" >> enhanced-ci-report.md
          echo "2. Address any critical issues" >> enhanced-ci-report.md
          echo "3. Consider merging to test branch" >> enhanced-ci-report.md

          cat enhanced-ci-report.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-ci-status-report
          path: enhanced-ci-report.md

      - name: Send notification on failure
        if: failure()
        run: |
          echo "üö® CI Pipeline Failed" > notification.md
          echo "Repository: ${{ github.repository }}" >> notification.md
          echo "Branch: ${{ github.ref_name }}" >> notification.md
          echo "Check the enhanced CI report for details." >> notification.md
          cat notification.md

      - name: Upload failure notification
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-notification
          path: notification.md
